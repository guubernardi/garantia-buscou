// ---- ELEMENTOS PRINCIPAIS ----
const mainTitle = document.getElementById('mainTitle');
const textarea = document.getElementById('titleInput');
const updateBtn = document.getElementById('updateBtn');

// ---- CONVERS√ïES ENTRE HTML E TEXTO ----
function htmlToText(html) {
  return html.replace(/<br\s*\/?>/gi, '\n').replace(/\s+\n/g, '\n').trim();
}

function textToHtml(text) {
  return text.replace(/\n/g, '<br>');
}

// ---- ATUALIZAR T√çTULO ----
function updateTitle() {
  if (updateBtn.disabled) return;
  mainTitle.innerHTML = textToHtml(textarea.value.trim());

  mainTitle.classList.remove('title-updated');
  void mainTitle.offsetWidth;
  mainTitle.classList.add('title-updated');

  updateBtn.disabled = true;
}

// ---- ATALHO: CTRL + ENTER ----
document.addEventListener('keydown', (e) => {
  const isConfirm = (e.ctrlKey || e.metaKey) && e.key === 'Enter';
  if (isConfirm) updateTitle();
});

// ---- INICIALIZA√á√ÉO DO TEXTAREA E BOT√ÉO ----
textarea.value = htmlToText(mainTitle.innerHTML);
updateBtn.disabled = true;

textarea.addEventListener('input', () => {
  updateBtn.disabled = textarea.value.trim() === '';
});


// ---- UPLOAD DE IMAGENS NOS CARDS ----
const input = document.getElementById('ImageInput');
const cards = document.querySelectorAll('.card');
const previewMsg = document.getElementById('preview-msg'); // üëà adiciona isso

input.addEventListener('change', function () {
  const files = input.files;
  if (!files || files.length === 0) {
    previewMsg.textContent = 'Nenhuma imagem selecionada.';
    return;
  }

  previewMsg.textContent = `${files.length} imagem(ns) carregada(s).`;

  [...files].forEach((file, index) => {
    if (index < cards.length) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.style.width = '100%';
        img.style.height = 'auto';
        img.style.borderRadius = '15px';
        img.style.objectFit = 'contain';
        img.style.zIndex = '1';

        const card = cards[index];
        card.innerHTML = ''; // limpa conte√∫do anterior
        card.appendChild(img);
      };
      reader.readAsDataURL(file);
    }
  });
});



/**
 * @file screenshot.js
 * @description Cont√©m a l√≥gica para capturar a tela inteira da p√°gina web e for√ßar o download como uma imagem PNG.
 * @author Seu Nome (ou da equipe)
 * @date 2025-08-12
 */

// ---- DOWNLOAD DA TELA COMO IMAGEM ----

/**
 * Tira um "print" do body inteiro da p√°gina usando a biblioteca html2canvas,
 * cria uma imagem a partir dele e inicia o download no navegador do usu√°rio.
 */
function downloadScreenshot() {

  // O alvo da captura √© a p√°gina inteira, ent√£o o melhor elemento para isso √© o <body>.
  const targetElement = document.body;

  // --- PREPARA√á√ÉO PARA A CAPTURA ---

  // 1. Salvar a posi√ß√£o atual do scroll do usu√°rio.
  // A gente vai resetar o scroll pra tirar o print, ent√£o precisamos guardar isso
  // para devolver a p√°gina ao estado original depois, sem atrapalhar a navega√ß√£o.
  const originalScrollX = window.scrollX;
  const originalScrollY = window.scrollY;

  // 2. Levar a p√°gina para o topo.
  // Macete essencial! O html2canvas renderiza a partir da viewport. Se n√£o fizermos
  // isso, a captura pode come√ßar do meio da p√°gina e cortar o conte√∫do. Tamb√©m garante
  // que elementos com `position: fixed` sejam posicionados corretamente.
  window.scrollTo(0, 0);

  // 3. Um pequeno delay.
  // O `scrollTo` n√£o √© 100% s√≠ncrono. O navegador precisa de um tempinho para
  // renderizar a mudan√ßa. Esse timeout garante que a captura s√≥ aconte√ßa DEPOIS
  // que a p√°gina j√° rolou para o topo. 100ms √© um valor seguro.
  setTimeout(() => {

    // --- EXECU√á√ÉO DO HTML2CANVAS ---
    html2canvas(targetElement, {
      // Op√ß√µes para garantir uma captura de qualidade e completa.

      // Aumenta a resolu√ß√£o da imagem final. `scale: 2` √© como um "retina display".
      scale: 2,

      // Necess√°rio para que imagens de outros dom√≠nios (Ex: de um CDN) sejam renderizadas.
      // Se `false`, essas imagens n√£o aparecer√£o no print.
      useCORS: true,

      // Define o tamanho da imagem gerada para ser o tamanho total do conte√∫do da p√°gina,
      // incluindo a parte que est√° fora da tela (o scroll). √â isso que captura "tudo".
      width: targetElement.scrollWidth,
      height: targetElement.scrollHeight,

      // Informa ao html2canvas o tamanho da "janela" e a posi√ß√£o do scroll.
      // Como for√ßamos o scroll para (0,0), passamos esses valores. Crucial para
      // que elementos fixos e outros c√°lculos de layout funcionem bem.
      windowWidth: document.documentElement.clientWidth,
      windowHeight: document.documentElement.clientHeight,
      scrollX: 0,
      scrollY: 0

    }).then(canvas => {
      // --- MANIPULA√á√ÉO DO RESULTADO ---
      
      // O html2canvas retorna um elemento <canvas>. Agora, vamos convert√™-lo em um arquivo.

      // 1. Cria um elemento de link <a> tempor√°rio em mem√≥ria.
      const link = document.createElement('a');

      // 2. Define o nome do arquivo que ser√° baixado.
      link.download = 'captura-de-tela.png';

      // 3. Converte o canvas para uma URL de dados (formato base64) e a define como o `href` do link.
      link.href = canvas.toDataURL('image/png');

      // 4. Simula um clique no link para iniciar o download. √â um truque padr√£o no frontend.
      link.click();

    }).finally(() => {
      // --- LIMPEZA P√ìS-CAPTURA ---

      // A parte mais importante para a experi√™ncia do usu√°rio:
      // Devolve o scroll para a posi√ß√£o original. Assim, a captura ocorre
      // de forma "invis√≠vel", sem que o usu√°rio perca onde estava na p√°gina.
      window.scrollTo(originalScrollX, originalScrollY);
    });
  }, 100);
}